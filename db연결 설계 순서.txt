1. spring 레거시 프로젝트 생성

2. 인코딩 설정을 통해 한글이 깨지는 현상을 수정
- web.xml
- home.jsp
- sts

3. 회원 관리를 위한 패키지 및 인터페이스,클래스,Mapper를 생성
- service/dao/vo 패키지 생성
- MemberService,MemberServiceImp, MemberDAO, MemberMapper를 생성

4.Mybatis를 연결해서 적용
stajun.tistory.com > 스프링 프로젝터 > 5DB연동

5.회원가입 기능을 구현
 1) 웹브라우저에서 요청(회원가입 링크 추가)
   - main페이지에 해당하는 home.jsp에서 추가
     - 회원가입 링크를 추가 : url => /member/signup

 2) 링크를 통해 이동했을때 회원가입 페이지가 보이게 작업
   - controller에 해당 url을 담당하는 것을 추가
     - 메소드 추가
       - url : /member/signup
       - method : get
       - 화면 : /member/signup
   - jsp를 추가(회원가입 화면을 위한) - 여기까지 했을때 회원가입 화면이 나와야함
     - member 폴더 안에 signup.jsp를 추가
     - 회원가입 화면을 구성 : form태그
       - method : post
       - url : /member/signup

 3) 회원정보를 입력 후 회원가입 버튼을 눌렀을 때 회원가입이 진행되게 작업해야함
   - 컨트롤러
      - 매서드 추가
        - url: /member/signup
        - member: post
        - 화면 : util/message
   - message.jsp를 추가
      - 서버에서 msg와 url을 보내주면 msg를 alert으로 띄우고 url로 이동하는 작업
   - 컨트롤러
      - 화면에서 보내준 회원 정보를 확인(sysout으로 콘솔에 출력)
      - 서비스에게 회원정보를 주면서 가입하라고 요청하고, 성공하면 msg에 회원가입 성공, url을 /으로 하고
        실패하면 msg에 회원가입 실패, url은 /member/signup 유지	
   - 서비스/서비스 임플에 메소드 추가
      - 메서드 추가
        - 매개변서 체크
        - 아이디 중복 확인
          - 다오에게 아이디를 주면서 회원 정보를 가져오라고 시킴
          - 가져온 회원정보가 null이 아니면 중복
        - 다오에게 회원 정보를 주면서 가입하라고 시킴
   - 다오/매퍼
      - 메서드 추가 및 쿼리를 구현
      - 매퍼
        - select 태그, resultType을 확인
    - 비밀번호 암호화
       - 의존성 추가
          - 그룹아이디 : org.springframework.security
          - 아티팩트아이디 : spring-security-web
          - 버전 : ${springframework-version}
       - security-context.xml을 생성
          - 컨트롤 + N > Spring bean configuration file 선택 후 생성
          - namespace 탭 선택 > security 체크박스 체크
          - 객체를 추가 
	<bean id="bcryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>
       - security-context.xml 파일을 읽어 올 수 있도록 web.xml을 수정
          - context-param 태그 안에 param-value태그에 /WEB-INF/spring/security-context.xml 추가
       - 서비스 임플
          - 멤버변수로 비밀번호 암호화 객체를 추가
	@Autowired
	private BCryptPasswordEncoder passwordEncoder;
          - 기존 회원가입하는 코드 앞에 비밀번호 암호화 하는 코드 추가
          - encode(문자열) : 문자열을 복호화가 불가능한 암호화된 문자열을 만들어주는 메서드
    - 안내문구를 위한 jsp 추가

로그인 기능 구현 과정을 정리

1. 로그인 링크를 추가
   - home.jsp에 a태그를 이용
      - url: /member/login

2. 로그인 화면을 구성
    - 컨트롤러에 메소드를 추가
      - url : /member/login
      - method : get
      - 화면 : /member/login
    - login.jsp 추가 및 화면을 구현
      - form태그
        - url : /member/login
        - method : post

3. 로그인 기능 구현
    - 컨트롤러에 메서드 추가 및 구현
       - url: /member/login
       - method : post
       - 화면 : /util/message
       - 화면에서 보낸 로그인정보(아이디와 비번)을 콘솔에서 확인
       - 서비스에게 로그인정보를 주면서 로그인 정보에 맞는 회원 정보를 달라고 요청
       - 가져온 회원 정보를 화면에 전달
       - 회원 정보에 따라 url과 msg를 화면에 전달
     - 서비스에 메서드 추가 및 구현
       - 멤버변수 체크
       - 다오에게 아이디를 주면서 회원정보를 가져오라고 시킴
       - 회원정보가 없으면 null을 리턴
       - 있으면 passwordEncoder를 이용하여 비밀번호를 확인 후 일치하면 회원정보를 일치하지 않으면 null을 리턴 
    - interceptor 패키지 생성
    - LoginInterceptor 클래스 생성 및 구현 : HandlerInterceptorAdapter클래스를 상속
       - postHandle울 오버라이딩
          - 회원정보가 있으면 세션에 추가
    - servlet.context.xml에 LoginInterceptor 등록 및 mapping
    - 로그인을 한 경우 home.jsp에 로그인과 회원가입이 안보이게 처리   

4. 로그아웃
    - 로그아웃 링크를 추가 : home.jsp
    - 컨트롤러에 메서드 추가
       - url : /member/logout
       - method : post
       - 화면 : /util/message
       - 세션에 있는 회원 정보를 제거
       - 성공/실패 여부에 따라 msg와 url을 설정










































